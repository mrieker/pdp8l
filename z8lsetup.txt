
= = = = = = = = = = = = = = = =

Setting up the software and test software on simulator
Requires a ZTurn 7020 board but does not need to be plugged into PDP

    1) make SD card using procedure in zplin/quicksdcard.txt
       do not need to plug zturn into pdp-8/l yet

       there are BOOT.BIN and image.ub files in the zynq directory
       to copy to the SD card /boot directory

       there is a copy of the linux kernel headers in the zplin directory
        ...that are needed to build the kernel module

       the basic outline is (all done on a PC):
        1) put RasPI OS on an SD card
        2) delete all RasPI /boot files then replace with BOOT.BIN and image.ub
        3) expand rootfs partition to fill SD card
        4) edit SD card /etc/passwd to remove root and pi passwords
        5) put linux kernel headers on SD card /usr/src and link to /lib/modules

    2) plug USB cable from connector right next to the SD card on ZTurn card to a PC
       ...this is the console
       use a com port program to access the serial port at 115,200 baud

    3) log in as root to set up network and install some utilities
       - look for apt installs in zplin/quicksdcard.txt
       - enable ssh daemon and set passwords so ssh will work

    4) use ssh to log into the ZTurn as non-priv user (pi)
       optionally copy PC's .ssh/id_rsa.pub to ZTurn's .ssh/authorized_keys using scp so you don't need password any more
       clone the repo either from the PC or from github

        git clone https://github.com/mrieker/pdp8l.git

    5) download some maindec files

        cd pdp8l
        wget https://pdp8online.com/ftp/software/paper_tapes/tapes.tgz
        tar xzvf tapes.tgz

        ...should create a directory called alltapes

        wget https://so-much-stuff.com/pdp8/tapes/maindec/maindec-08-d3ra-pb -O alltapes/d3ra-pb.bin

    6) compile the software on the ZTurn

        cd pipan8l
        make FPPCB=3    have the through-hole part front panel board
        make FPPCB=4    have the surface-mount part front panel board

    7) should be able to run a couple maindecs on simulator:

        ./z8lsim run-d01b.tcl
        ./z8lsim run-d02b.tcl

    8) compile and run demo programs on simulator:

        git clone https://github.com/mrieker/pdp8v.git
        cd pdp8v/asm
        make
        cd ../..

        ./z8lsim doubleroll.tcl
        - uses './z8lsim -status' to display ascii-art front panel
        - MA & AC lights roll in opposite directions
        - press control-C to abort

        ./z8lsim kaleid.tcl e
        - displays random patterns in simulated VC/8E X window
        - close X window or press control-C to abort
        - have to use ssh -X from PC so it can open window

    9) run music program on simulator

        cd ../music
        more readme.txt
        - follow instructions therein

= = = = = = = = = = = = = = = =

Getting it to work on real PDP-8/L:

    1) plug all circuit boards in, including front panel piggy back
       should put power jumper plug on front panel piggy back board
       zturn36 board should not have a power jumper because the console usb will supply power

       Note:
        You will need to remove boards from rows 31,32,33 to get these boards
        plugged in.  Then plug them back in, subject to the TTY note below.

        Be very careful when plugging in the interconnect connectors, it is very
        easy to be off-by-one.  Maybe use a dental mirror to inspect before
        powering on.

        Likewise it is very easy to be off-by-one when plugging the ZTurn card
        into the ZTURN36 board with those finely spaced pins so be sure they are
        in correctly before powering on or it might fry some Zynq chip driver
        transistors.  And make sure the ethernet connector is where the ZTURN36
        board says ETHERNET.

       Note:
        The test programs use the TTY circuits in the FPGA to access TTY input/
        output so you must remove the TTY boards M706 and M707.  You can also
        remove the TTY clock gen card M452 and TTY cable card W076.

        When not running tests, such as when running OS/8, the FPGA TTY can be
        accessed using the ./z8ltty command.  Or you can plug the TTY boards
        back in and use them.

    2) hook up ethernet and console USB cables to the ZTurn

       Note:
        If the ZTurn has a static IP address, you should not need the USB cable
        except to power the ZTurn board.  Alternatively, the ZTurn can be powered
        from the PDP via the power jumper on the ZTURN36 board.  It is probably
        not a good idea to have both the USB cable connected and the power jumper
        in place at the same time.

    3) should still be able to log in just as before and simulator should still work

    4) turn PDP-8/L on

    5) from pdp8l/pipan8l directory

    * Test I2C connection to front panel

        ./i2cztest
        - press control-C to abort

    * Run basic memory test (analogous to toggling various locations via front panel switches):

        ./z8lreal                       # make sure accessing real PDP (not sim)

        ./z8lpanel                      # access front panel piggy-back board for automated testing

        ;# these commands override the real switches to do ldad, exam, dep to access single memory locations
        ;# should see lights blink as each deposit/examine is done
        ;# processor must be halted for them to work (just like doing ldad, exam, dep from front panel)
        ;# ...and should remain halted throughout

        z8lpanel> wrmem <addr> <data>   ;# write <data> to memory at <addr> (it's TCL so need leading 0 for octal)
        z8lpanel> octal [rdmem <addr>]  ;# read memory at <addr> then display in octal

            ;# they can be scripted, eg, to repeatedly write 5432 to mem addr 12345 until control-C:
            z8lpanel> while {![ctrlcflag]} {wrmem 012345 05432}
            ;# ... then you can trace through with a scope

            Note:
                The rdmem and wrmem commands can only access addresses 000000..017777 because the PDP-8/L
                panel only has switches for that address range.

        ;# access some memory test scripts (they use rdmem, wrmem to access memory)

        z8lpanel> source testmem.tcl

        ;# tests use console deposit/examine so they run s-l-o-w-l-y
        ;# press control-C once to abort a test back to z8lpanel> prompt
        ;# ... twice quickly should get to shell prompt

        z8lpanel> testzeroes 0 077      ;# writes 0s to locations 0000..0077 then verifies (use other ranges as needed)
        z8lpanel> testones 0 077        ;# writes 1s to locations 0000..0077 then verifies (use other ranges as needed)
        z8lpanel> looptest testrands    ;# writes random numbers to memory then verifies, in blocks of 64 words at a time

        z8lpanel> isziactest            ;# puts a simple ISZ/IAC loop in memory
        z8lpanel> startat 020           ;# start it running
                                        ;# should see link,accumulator incrementing on front panel
        z8lpanel> octal [getreg ac]     ;# read AC via D connectors at back of PDP then display in octal
        z8lpanel> dumpit                ;# dump all front panel values, observe RUN indicator
        z8lpanel> flicksw stop          ;# stop the test (optional), or use front panel stop switch
        z8lpanel> dumpit                ;# dump all front panel values, RUN indicator absent
        z8lpanel> exit

      Note:
        The above tests are generally sufficient to see if the PDP is working.  The memory tests
        will find stuck memory bits and stuck MA/MB register bits, and isziactest will test that
        the processor can execute instructions and that the AC does not have stuck bits.

      Note:
        Run './z8lpanel -status' from another ssh window to see an ascii-art replica of
        the front panel continuously updated while running the above tests.  It should
        match what the real PDP lights are showing.  If not, there is a problem, might
        be as simple as a burnt out bulb.  The AC,MA,MB,RUN,BREAK signals are read from
        the row 34,35,36 connectors at the back so that might be another source of error.

        The switch register will be different because the tests tell z8lpanel to
        override the real switches.  In any case, './z8lpanel -status' will show what
        the PDP actually sees for switches.  Use the 'relsw all' command in z8lpanel
        to release its override of the switches.  Using 'setsw sr 01234' tells z8lpanel
        to override the switchregister switches with 1234.

      Note:
        The above tests also work with z8lsim (although much faster).

      Note:
        If your core memory has issues, the FPGA can handle the core functionality.
        Instead of './z8lreal' command, use './z8lreal -enlo4k' (enable low 4K FPGA memory).
        The FPGA will tell the PDP to use FPGA RAM for all memory accesses by holding _EA low.
        You can verify enlo4k mode with either './z8ldump -once' from shell or
        'pin get xm_enlo4k' from within z8lpanel.

        You can also turn it on from within z8lpanel with 'pin set xm_enlo4k 1'
        and turn it off with 'pin set xm_enlo4k 0'.  Processor should be halted
        while using these commands!  Try 'hardreset' command if PDP gets jammed
        up somehow.

    * Test ZTurn bus connections (tests abort if they find an error):

        If your PDP does not have the DMA (BREAK) option installed,
        use the './z8lreal -nobrk' command to tell FPGA to not use
        it.  The FPGA will use internal circuitry to access its own
        RAM, even for the low 4K, instead of trying to use the PDP's
        DMA option circuitry.  This option also forces enlo4k mode
        so the processor will always use the FPGA RAM even for the
        low 4K.  This setting is also available in z8lpanel as the
        cm_nobrk pin, but you must also explicitly turn on enlo4k
        mode with pin xm_enlo4k, 'pin set xm_enlo4k 1 cm_nobrk 1'.

        memory (B) connectors - get memory address (MA) from the PDP
                                send memory read data (MEM) to the PDP
                                (write data is on MB register lines)
        dma (C) connectors - send DMA address and write data to the PDP
                             (read data is on MB register lines)
        pio (D) connectors - get memory buffer (MB) from the PDP
                             get accumulator (AC) from the PDP
                             send PIO read data (INPUTBUS) to the PDP

        test dma (C) and memory (B) connectors:
            ./z8lcmemtest
            - prints 'pass m complete n errors' (2 or 3 sec)
            - press control-C to abort

            ./z8lcmemtest -3cycle -cainc -extmem
            - tests all the bells and whistles (15 to 20 sec per pass)

            The panel lights should show a constant 5252 for MA and MB
            and that the processor is running FETCH cycles.  Theoretically
            you could see a glow of the BREAK light along with fainter
            WC and CA lights but it may not be apparent.  You can see those
            other state occasionally on the ./z8lpanel -status display when
            it happens to sample the lights at just the right time.

            Basically the processor is executing a '5252: JMP 5252' instruction
            while the z8lcmemtest program is making like it is a disk controller
            doing DMA requests via pdp8lcmem.v to read and write memory.

        test pio (D) connectors (assumes z8lcmemtest works):
            ./z8lpiotest
            - prints '*' after each pass (2 sec or so at first then every 0.5 sec thereafter)
            - press control-C to abort

            There should be a glow of activity on the front panel for
            this test as the processor is running a little program that
            can be found in z8lpiotest.cc.

        pound the living daylights out of it (originally for testing sim but adapted to test real PDP):
            ./z8lsimtest -real                      # prints every insruction
            ./z8lsimtest -real | grep '0000  L'     # prints every 10000th instruction

            You will have to get things started manually or use z8lpanel in a separate screen.
            Start the test then follow the prompt to get things going.  It waits for you to
            stop the processor, then enter the '5252: JMP 5252' loop and start it.  Either use
            the front panel directly or use z8lpanel from another ssh screen:

                ./z8lpanel
                z8lpanel> flicksw stop
                z8lpanel> setsw sr 05252
                z8lpanel> flicksw ldad
                z8lpanel> flicksw start
                z8lpanel> relsw all
                z8lpanel> exit

            It stops if there is any error.  It should run as long as you want it to.

            All lights should be flashing randomly as z8lsimtest feeds the PDP random instructions
            and operands, verifying each memory cycle as it goes along.  Also feeds in DMA cycles
            here and there (1-cycle and 3-cycle) and interrupt requests.  You shouldn't see any
            activity on the PAR,PROT lights and ION will just occasionally blink.  Also rare is for
            any of the WC,CA,B lights to blink, and RUN should be on continuously.

            Then maybe show lights in ascii-art screen while test is running:
                ./z8lpanel -status

        Note:  It is possible for these tests to leave the PDP in a wacky state when
            stopped (with control-C).  Try the 'hardreset' command in z8lpanel to try
            to unjam it, or as a last resort, power cycle the PDP.

    * Run MAINDECs:

        note:
            the loadbin function runs a lot slower on the real machine vs the simulator
            it uses deposit/examine to load the program in memory which is slow on real PDP-8/L

        ./z8lpanel run-d01b.tcl
        ./z8lpanel run-d02b.tcl
        ./z8lpanel run-d04b.tcl
        ./z8lpanel run-d05b.tcl
        ./z8lpanel run-d07b.tcl
        ./z8lpanel run-d1eb.tcl
        ./z8lpanel run-d1gb.tcl
        ./z8lpanel run-d3ra.tcl

        note:
            when running d3ra test, you may want to monitor dectape status in another
            ssh window with a './z8ltc08 -status' command (another ascii-art screen)

    * Run doubleroll, kaleidoscope and music programs as desired

        Use same instructions as for simulator except do a ./z8lreal
        command to make sure using real PDP, then use ./z8lpanel instead
        of ./z8lsim.

= = = = = = = = = = = = = = = =

    To monitor what is going on with the FPGA at any time, run the ./z8ldump program.
    It is a continuous dump of all the registers the FPGA makes available to the ARM processor.
    It can be run at any time without any side effects.
    It is often useful to leave ./z8ldump running on one window all or most of the time.
    You can do './z8ldump -once' to just display one frame.

    Sample output:

        VERSION=384C4097 8L
          oBIOP1=0             oBAC=0000                              iBEMA=1              iDMAADDR=2540     S majstate=HALT
          oBIOP2=0             oBMB=7572           nanocstep=1        i_CA_INCRMNT=1       iDMADATA=1175     I nextmajst=HALT
          oBIOP4=0             oMA=2420            nanotrigger=1      i_DATA_IN=1          iINPUTBUS=0000    M timedelay=0
          oBTP2=0                                  nanocontin=1       iMEMINCR=0           i_MEM=0205        . timestate=TSIDLE
          oBTP3=0            S lbBRK=0             fpgareset=0        i_MEM_P=1          S swCONT=0          . cyclectr=0000
          oBTS_1=0           I lbCA=0              simit=0            i3CYCLE=0          I swDEP=0           . simmemen=0
          oBTS_3=0           M lbDEF=0             bareit=0           iAC_CLEAR=0        M swDFLD=0
          o_BWC_OVERFLOW=1   . lbEA=0                                 iBRK_RQST=0        . swEXAM=0          S debounced=0
          o_B_BREAK=1        . lbEXE=0             bDMABUS=5104       i_EA=0             . swIFLD=0          I lastswLDAD=0
          oE_SET_F_SET=1     . lbFET=0             x_DMAADDR=0        iEMA=1             . swLDAD=0          M lastswSTART=0
          oJMP_JMS=0         . lbION=0             x_DMADATA=1        iINT_INHIBIT=0     . swMPRT=0
          oLINE_LOW=0        . lbLINK=0                               iINT_RQST=0        . swSTEP=0            oC36B2=0
          oMEMSTART=0        . lbRUN=0             bMEMBUS=7777       iIO_SKIP=0         . swSTOP=0            oD35B2=0
          o_ADDR_ACCEPT=1    . lbWC=0              r_MA=1             i_MEMDONE=1        . swSTART=0
          o_BF_ENABLE=1      . lbIR=2              x_MEM=1            i_STROBE=1         . swSR=0000
          o_BUSINIT=0
          oB_RUN=0           S lbAC=0000           bPIOBUS=7671       memcycctr=91D2492D   xbraddr=00000
          o_DF_ENABLE=1      I lbMA=0204           r_BAC=1            didio=0              xbrwena=0
          o_KEY_CLEAR=1      M lbMB=0337           r_BMB=0            hizmembus=1          xbrenab=0
          o_KEY_DF=1                               x_INPUTBUS=1       meminprog=   0       xbrrdat=7572
          o_KEY_IF=1           o_LOAD_SF=1                                                 xbrwdat=0000
          o_KEY_LOAD=1         o_SP_CYC_NEXT=1

        VERSION=524B2005 RK 00000000 00000000 00000000 00000000 00000001 DEADBEEF DEADBEEF

        VERSION=56432005 VC 00000000 30100000 00006996 203EBED8 DEADBEEF DEADBEEF DEADBEEF

        VERSION=4650200D FP 00000000 00000000 6B7FE97F 00F51FF2 F0009F30 00000000 DEADBEEF

        VERSION=584D202D XM  enlo4k=0  enable=1  ifld=6  dfld=6  field=6  _mwdone=1  _mrdone=1  os8zap=0,step=0
                mrhold,step=0,0  mwhold,step=0,0  xmstate= 0  xmmemenab=0  memcycctr=689F89F8.9D89F89F
                addrlatchwid=8  readstrobedel=35  readstrobewid=10  writeenabdel=75  writeenabwid=5  writedonewid=10

        VERSION=5348200C SH err=2000 foe=0 ms=F  ts=1+ 1 ir=5252 pc=5252 mb=5252 ma=5252 l.ac=0.0000 ea=5252

        VERSION=434D1018 CM 227D0560 00000020 00000000

        VERSION=54541009 TT 40000091 000000AA 00000103

        VERSION=54541009 TT 40000D5B 00000C80 00000120

        VERSION=54541009 TT 40000000 00000000 00000122

        VERSION=54541009 TT 40000000 00000000 00000124

        VERSION=54541009 TT 40000000 400006A3 00000126

        VERSION=50421004 PB 004AE000 30D30005 00000000

        VERSION=50520002 PR 00000000

        VERSION=50500001 PP 00000000

        VERSION=54430002 TC 80000000

  Top half (above the RK line):

    These signals top center are important:

        nanocontin=1        =1: FPGA is clocking itself at 100MHz (normal)
                            =0: FPGA must be clocked by setting nanotrigger (debugging)
        fpgareset=0         =0: FPGA running normally
                            =1: FPGA being held in power-on reset state
        simit=0             =0: FPGA is using real PDP-8/L (sim held in reset)
                            =1: FPGA is using simulator (ignoring PDP)
        bareit=0            =0: send simulated device signals to PDP (normal)
                            =1: send ARM debug signals to PDP (debugging)

        They can be read with ./z8lpanel 'pin get' command and written with 'pin set' command.
        The nanotrigger signal is self-clearing.

            pin set fpgareset 1 fpgareset 0     ;# blip the fpgareset signal
            pin get simit                       ;# see if simulating (prints/returns 0 or 1)
            pin set simit 1                     ;# turn on simulator (ignore PDP)

    Signals beginning with 'o' are outputs from the PDP to the FPGA.
    The names pretty much correspond with the signals in the PDP documentation.
    The ones that have o_ at the beginning are active low, the others are active high.

        oBIOP1 = I/O pulse 1 from the PDP (active high)
        o_B_BREAK = break cycle indicator from the PDP (active low)

    Signals beginning with 'i' are inputs to the PDP from the FPGA.
    The names pretty much correspond with the signals in the PDP documentation.
    The ones that have i_ at the beginning are active low, the others are active high.

        iBRK_RQST = FPGA is requesting a DMA cycle from the PDP (active high)
        i_EA = FPGA is telling PDP to use extended memory instead of core for the cycle (active low)

    Signals beginning with 'b' are the bi-directional busses, bPIOBUS (on the 'D' connectors),
    bMEMBUS (on the 'B' connectors), bDMABUS (on the 'C' connectors).  The bits are generally
    scrambled around so aren't generally useful.  The bus signals are gated between the FPGA
    and the PDP by the r_ (received into the FPGA from the PDP) and x_ (transmitted out from
    the FPGA into the PDP) signals.  Care must be taken to not enable two drivers on the same
    set of wires at the same time so the transistors don't get overloaded.

    Note:
        Active high/low of these signals may differ from the PDP-8/L signal as the signal
        may go through an inverting 3.3V/5V conversion between the FPGA and the PDP-8/L.

    Signals listed with S-I-M pertain to the simulator only.
    Those beginning with lb are lightbulbs, sw are switches.
    Others are miscellaneous state information.

  Bottom half (starting with RK line) are the device modules:
    Most are raw ARM 32-bit registers so are in hexadecimal

    RK - pdp8lrk8je.v module registers (decpack)

    VC - pdp8lvc8.v module registers (video controller)

    FP - pdp8lfpi2c.v module registers (front panel via I2C)

    XM - pdp8lxmem.v module registers (extended memory)

        of particular importance:

            enlo4k=1 : use FPGA 32KW memory for low 4K
                  =0 : real PDP-8/L : use PDP-8/L core memory for low 4K
                          simulator : use small FPGA 4KW memory for low 4K
            available to z8lpanel pin get/set command as xm_enlo4k

    SH - pdp8lshad.v module registers (processor shadow)

            monitors processor cycles to make sure they are what they should be
            sets err bits and freezes contents when discrepancy found
            works only when enlo4k enabled continuously since last START key

    CM - pdp8lcmem.v module registers (direct memory access)

            used by z8lrk8je and z8ltc08 to do dma transfers

        of particular importance:

            VERSION=434D1018 CM 227D0560 00000020 00000000
                                         ^
                                         |
                                         bit <29> = available to z8lpanel pin get/set command as cm_nobrk

            - cm_nobrk=0 : uses PDP's BREAK circuitry so can access PDP's core memory
            - cm_nobrk=1 : all accesses are made to FPGA's 32KW memory
                           must have xm_enlo4k set for it to be useful
                           otherwise PDP would be using its own core for low 4K,
                             while all low 4K DMA would be going to FPGA RAM

    TT - pdp8ltty.v module registers (teletypes)

        of particular importance:

            VERSION=54541009 TT 40000091 000000AA 00000103
                                                        ^^
                                                        ||
                                                        kb I/O port (+1 for the pr I/O port)

    PB - pdp8lpbit.v module registers (pulse bit audio)

    PR - pdp8lptr.v module registers (paper tape reader)

    PP - pdp8lptp.v module registers (paper tape punch)

    TC - pdp8ltc08.v module registers (dectape)

= = = = = = = = = = = = = = = =

